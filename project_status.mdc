---
description:
globs:
alwaysApply: false
---

# Seed-E Project Status

## ✅ **COMPLETED FEATURES**

### 🔐 **Authentication System**

- ✅ User registration and login
- ✅ 2FA setup and verification
- ✅ Password reset functionality
- ✅ Recovery key generation and validation
- ✅ Session management with JWT tokens
- ✅ User validation middleware

### 🏢 **Provider Dashboard**

- ✅ Provider registration and management
- ✅ Policy creation and management
- ✅ Signature request handling
- ✅ Key management interface
- ✅ **Import Key Modal with QR Scanner Integration**
  - ✅ Hardware and software device categories
  - ✅ Multi-step import flow with method selection
  - ✅ **Direct import for single-method devices** (e.g., SeedSigner goes straight to QR)
  - ✅ **QR Scanner with camera and file upload support**
  - ✅ **SeedSigner format parsing** (master fingerprint, derivation path, xpub)
  - ✅ **UR and BBQR format support**
  - ✅ **Form validation for all xpub variants** (xpub, Xpub, ypub, Ypub, zpub, Zpub)
- ✅ **Sign Message Modal with PSBT Creation**
  - ✅ **Proper bitcoinjs-lib integration** for real PSBT creation
  - ✅ **OP_RETURN output** containing the message "Seed-E"
  - ✅ **BIP32 derivation info** for SeedSigner compatibility
  - ✅ **QR code generation** for PSBT scanning
  - ✅ **Two-step process**: QR scan → signature input
  - ✅ **Form integration** with control signature field

### 💰 **Client Dashboard**

- ✅ Service browsing and purchase
- ✅ Lightning payment integration
- ✅ Signature request creation
- ✅ PSBT upload and management
- ✅ Payment status tracking

### ⚡ **Lightning Network Integration**

- ✅ Decentralized Lightning integration (LNURL)
- ✅ Lightning address support
- ✅ Payment webhook handling
- ✅ Invoice generation and validation

### 🔧 **Backend Services**

- ✅ Prisma database with migrations
- ✅ User authentication and authorization
- ✅ Service policy management
- ✅ Signature request processing
- ✅ Payment validation and confirmation

## 🚧 **IN PROGRESS**

### 🔑 **Add Key Form - Control Signature Validation**

- ✅ **Sign Message Modal** - Complete with proper PSBT creation
- ✅ **QR Code Generation** - Working with bitcoinjs-lib
- ✅ **Form Integration** - Connected to control signature field
- 🔄 **Backend Validation** - Need to update to handle PSBT signatures instead of message signatures
- 🔄 **Signature Verification** - Need to verify PSBT signatures against xpub

## 📋 **TODO - Add Key Form**

### **Remaining Tasks:**

1. **Backend PSBT Validation** - Update `/api/providers/validate-signature` to:

   - Accept PSBT data instead of hex signatures
   - Parse PSBT and extract signatures
   - Verify signatures against the xpub using bitcoinjs-lib
   - Validate that the PSBT contains the expected "Seed-E" message

2. **PSBT Signature Verification** - Implement proper signature verification:

   - Extract public key from xpub
   - Verify signature against the message hash
   - Handle different signature formats (DER, etc.)

3. **Error Handling** - Add proper error messages for:

   - Invalid PSBT format
   - Missing signatures
   - Signature verification failures
   - Wrong message content

4. **Testing** - Test the complete flow:
   - Generate PSBT with "Seed-E" message
   - Sign with SeedSigner
   - Submit signed PSBT
   - Verify signature on backend
   - Complete form submission

## 🎯 **CURRENT STATUS**

The **Add Key Form** is **90% complete**:

- ✅ **Import Key Modal** - Fully functional with QR scanning
- ✅ **Sign Message Modal** - Complete with proper PSBT creation
- ✅ **Form Validation** - All fields validated
- 🔄 **Control Signature** - Modal works, backend validation needed
- ⏳ **Final Integration** - Backend PSBT validation pending

**Next Steps:**

1. Update backend signature validation to handle PSBTs
2. Test complete flow with SeedSigner
3. Deploy and test in production environment

## 🏗️ **TECHNICAL ARCHITECTURE**

### **Frontend Components:**

- `ImportKeyModal.tsx` - QR scanning and key import
- `SignMessageModal.tsx` - PSBT creation and signature collection
- `provider-dashboard/page.tsx` - Main provider interface

### **Backend APIs:**

- `/api/providers/validate-signature` - Signature validation (needs PSBT support)
- `/api/providers/route.ts` - Provider management
- `/api/signature-requests/*` - Signature request handling

### **Libraries Used:**

- `bitcoinjs-lib` - PSBT creation and manipulation
- `tiny-secp256k1` - Cryptographic operations
- `qrcode.react` - QR code generation
- `@ngraveio/bc-ur` - UR format support

## 🚀 **DEPLOYMENT READY**

The application is ready for deployment with:

- ✅ Complete authentication system
- ✅ Provider and client dashboards
- ✅ Lightning payment integration
- ✅ QR code scanning and generation
- ✅ PSBT creation and handling
- 🔄 Final signature validation integration pending
