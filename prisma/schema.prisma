// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  output        = "../node_modules/.prisma/client"
}

// Local development database configuration
//datasource db {
  //provider = "postgresql"
  //url      = env("DATABASE_URL")
//}

// Production database configuration (uncomment before deploying)
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// ================================================================= //
//                            MODELS                                 //
// ================================================================= //

enum KeyPolicyType {
  P2WSH
  P2TR
  P2SH
}

// Represents an individual or entity providing signing services.
model Provider {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username        String  @unique
  passwordHash    String
  twoFactorSecret String? // Encrypted TOTP secret
  recoveryKey     String? // Encrypted recovery key
  penaltyCount    Int     @default(0)

  // The services (key offerings) this provider has.
  services Service[]
}

// Represents a specific key being offered as a service by a Provider.
model Service {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  providerId String
  provider   Provider @relation(fields: [providerId], references: [id])

  // The policy type of the key being offered (e.g., Taproot, SegWit).
  policyType KeyPolicyType

  // The hashed extended public key for this service (for security).
  xpubHash String @unique

  // The encrypted extended public key (only accessible to the provider).
  encryptedXpub String?

  // The master fingerprint (e.g., 97046043) for client wallet setup.
  masterFingerprint String?

  // The derivation path (e.g., m/48'/0'/0'/2') for client wallet setup.
  derivationPath String?

  // The initial fee to get access to the xpub. In sats.
  initialBackupFee BigInt

  // The fee for each subsequent signature. In sats.
  perSignatureFee BigInt

  // The minimum time delay (in hours) before a signed PSBT can be returned.
  minTimeDelay Int @default(168) // Default to 7 days (168 hours)

  // An optional monthly fee for ongoing service. In sats.
  monthlyFee BigInt?

  // An optional annual fee for ongoing service. In sats.
  annualFee BigInt?

  // The BOLT12 offer string for receiving payments.
  bolt12Offer String?

  // The Lightning address for receiving payments (e.g., provider@voltage.com).
  lightningAddress String?

  // A flag to show if the service is active and listed.
  isActive Boolean @default(true)

  // A flag to show if the service has been purchased by anyone.
  isPurchased Boolean @default(false)

  // The clients who have purchased this service.
  servicePurchases ServicePurchase[]

  // The signature requests for this service.
  signatureRequests SignatureRequest[]

  // The subscription requests for this service.
  subscriptionRequests SubscriptionRequest[]
}

// Represents a client who can purchase services.
model Client {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username        String  @unique
  passwordHash    String
  twoFactorSecret String? // Encrypted TOTP secret
  recoveryKey     String? // Encrypted recovery key

  // The services this client has purchased.
  servicePurchases ServicePurchase[]

  // The pending signature requests from this client.
  signatureRequests SignatureRequest[]

  // The subscription payment requests from this client.
  subscriptionRequests SubscriptionRequest[]
}

// Represents a Client's purchase of a specific Service.
model ServicePurchase {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  // The payment hash of the invoice used to purchase the service.
  paymentHash String? @unique

  // Lightning address and amount for LNURL verification
  lightningAddress String?
  paymentAmount    BigInt?

  // LNURL verify URL for payment verification
  verifyUrl String?

  // Tracks the expiration date of the client's access to this service.
  expiresAt DateTime?

  // Whether the service is currently active for this client.
  isActive Boolean @default(true)

  @@unique([clientId, serviceId])
}

enum RequestStatus {
  REQUESTED  // Client has paid signature fee, waiting for PSBT upload
  PENDING    // PSBT uploaded, waiting for provider to sign.
  SIGNED     // Provider has signed and submitted the PSBT.
  COMPLETED  // Client has acknowledged/received the signed PSBT.
  EXPIRED    // The request timed out.
}

enum SubscriptionStatus {
  PENDING    // NIP-47 request created, waiting for payment
  COMPLETED  // Payment successful, subscription active
  FAILED     // Payment failed or invalid response
}

// Represents a request from a Client for a signature from a Provider.
model SignatureRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  // The PSBT (Partially Signed Bitcoin Transaction) needing a signature.
  // Stored as a base64 string.
  psbtData String

  // The PSBT after the provider has signed it.
  signedPsbtData String?

  // Hash of the PSBT for validation
  psbtHash String?

  // The payment hash for the signature fee
  paymentHash String? @unique

  // LNURL verify URL for payment verification
  verifyUrl String?

  // Whether the payment has been confirmed
  paymentConfirmed Boolean @default(false)

  // The fee paid for this signature request.
  signatureFee BigInt

  // The timestamp when the signed PSBT can be released to the client.
  unlocksAt DateTime

  // The timestamp when the provider uploaded the signed PSBT.
  signedAt DateTime?

  status RequestStatus @default(REQUESTED)
}

// Represents a NIP-47 subscription payment request
model SubscriptionRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientId String
  client   Client @relation(fields: [clientId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  // Type of subscription (monthly/annual)
  subscriptionType String

  // Amount in sats
  amount BigInt

  // NIP-47 request event (JSON string)
  nip47Request String

  // Status of the subscription request
  status SubscriptionStatus @default(PENDING)
}
