const crypto = require("crypto");

// Generate a proper unsigned 2-of-3 multisig PSBT
function generateUnsignedMultisigPSBT() {
  // PSBT magic bytes: 0x70736274ff
  const magicBytes = Buffer.from([0x70, 0x73, 0x62, 0x74, 0xff]);

  // Version: 0
  const version = Buffer.from([0x00, 0x00, 0x00, 0x00]);

  // Global transaction section
  const globalTx = Buffer.from([0x00]); // separator

  // Input section (2-of-3 multisig input)
  const inputSection = Buffer.from([
    0x01, // input count
    // Previous transaction hash (32 bytes) - realistic hash
    0x12,
    0x34,
    0x56,
    0x78,
    0x9a,
    0xbc,
    0xde,
    0xf0,
    0x11,
    0x22,
    0x33,
    0x44,
    0x55,
    0x66,
    0x77,
    0x88,
    0x99,
    0xaa,
    0xbb,
    0xcc,
    0xdd,
    0xee,
    0xff,
    0x00,
    0x11,
    0x22,
    0x33,
    0x44,
    0x55,
    0x66,
    0x77,
    0x88,
    0x00,
    0x00,
    0x00,
    0x00, // output index
    0x00, // sequence
    // Witness UTXO (type 0x01)
    0x01, // WITNESS_UTXO type
    0x08, // value length (8 bytes)
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x64, // value (100 sats)
    0x22, // script length (34 bytes)
    // P2WSH script: OP_0 + OP_PUSHBYTES_32 + witness script hash
    0x00,
    0x20, // OP_0 + OP_PUSHBYTES_32
    0x01,
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1a,
    0x1b,
    0x1c,
    0x1d,
    0x1e,
    0x1f,
    0x20,
    // Witness Script (type 0x02) - 2-of-3 multisig script
    0x02, // WITNESS_SCRIPT type
    0x71, // script length (113 bytes)
    // 2-of-3 multisig: OP_2 + 3 pubkeys + OP_3 + OP_CHECKMULTISIG
    0x52, // OP_2
    0x21, // OP_PUSHBYTES_33
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1a,
    0x1b,
    0x1c,
    0x1d,
    0x1e,
    0x1f,
    0x20,
    0x21,
    0x22,
    0x21, // OP_PUSHBYTES_33
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1a,
    0x1b,
    0x1c,
    0x1d,
    0x1e,
    0x1f,
    0x20,
    0x21,
    0x22,
    0x23,
    0x21, // OP_PUSHBYTES_33
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1a,
    0x1b,
    0x1c,
    0x1d,
    0x1e,
    0x1f,
    0x20,
    0x21,
    0x22,
    0x23,
    0x24,
    0x53, // OP_3
    0xae, // OP_CHECKMULTISIG
    0x00, // separator
  ]);

  // Output section
  const outputSection = Buffer.from([
    0x01, // output count
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x32, // value (50 sats)
    0x16, // script length (22 bytes)
    // P2WPKH script: OP_0 + OP_PUSHBYTES_20 + pubkey hash
    0x00,
    0x14, // OP_0 + OP_PUSHBYTES_20
    0x01,
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x00, // separator
  ]);

  // Combine all sections
  const psbt = Buffer.concat([
    magicBytes,
    version,
    globalTx,
    inputSection,
    outputSection,
  ]);

  return psbt.toString("base64");
}

// Generate a signed 2-of-3 multisig PSBT (with one signature)
function generateSignedMultisigPSBT() {
  // PSBT magic bytes: 0x70736274ff
  const magicBytes = Buffer.from([0x70, 0x73, 0x62, 0x74, 0xff]);

  // Version: 0
  const version = Buffer.from([0x00, 0x00, 0x00, 0x00]);

  // Global transaction section
  const globalTx = Buffer.from([0x00]); // separator

  // Input section with signature
  const inputSection = Buffer.from([
    0x01, // input count
    // Previous transaction hash (32 bytes) - realistic hash
    0x12,
    0x34,
    0x56,
    0x78,
    0x9a,
    0xbc,
    0xde,
    0xf0,
    0x11,
    0x22,
    0x33,
    0x44,
    0x55,
    0x66,
    0x77,
    0x88,
    0x99,
    0xaa,
    0xbb,
    0xcc,
    0xdd,
    0xee,
    0xff,
    0x00,
    0x11,
    0x22,
    0x33,
    0x44,
    0x55,
    0x66,
    0x77,
    0x88,
    0x00,
    0x00,
    0x00,
    0x00, // output index
    0x00, // sequence
    // Witness UTXO (type 0x01)
    0x01, // WITNESS_UTXO type
    0x08, // value length (8 bytes)
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x64, // value (100 sats)
    0x22, // script length (34 bytes)
    // P2WSH script: OP_0 + OP_PUSHBYTES_32 + witness script hash
    0x00,
    0x20, // OP_0 + OP_PUSHBYTES_32
    0x01,
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1a,
    0x1b,
    0x1c,
    0x1d,
    0x1e,
    0x1f,
    0x20,
    // Witness Script (type 0x02) - 2-of-3 multisig script
    0x02, // WITNESS_SCRIPT type
    0x71, // script length (113 bytes)
    // 2-of-3 multisig: OP_2 + 3 pubkeys + OP_3 + OP_CHECKMULTISIG
    0x52, // OP_2
    0x21, // OP_PUSHBYTES_33
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1a,
    0x1b,
    0x1c,
    0x1d,
    0x1e,
    0x1f,
    0x20,
    0x21,
    0x22,
    0x21, // OP_PUSHBYTES_33
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1a,
    0x1b,
    0x1c,
    0x1d,
    0x1e,
    0x1f,
    0x20,
    0x21,
    0x22,
    0x23,
    0x21, // OP_PUSHBYTES_33
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1a,
    0x1b,
    0x1c,
    0x1d,
    0x1e,
    0x1f,
    0x20,
    0x21,
    0x22,
    0x23,
    0x24,
    0x53, // OP_3
    0xae, // OP_CHECKMULTISIG
    // PARTIAL_SIG (type 0x02) - This makes it signed!
    0x02, // PARTIAL_SIG type
    0x21, // key length (33 bytes)
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1a,
    0x1b,
    0x1c,
    0x1d,
    0x1e,
    0x1f,
    0x20,
    0x21,
    0x22,
    0x47, // value length (71 bytes)
    // DER signature (71 bytes) - realistic signature
    0x30,
    0x45,
    0x02,
    0x21,
    0x00,
    0x01,
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1a,
    0x1b,
    0x1c,
    0x02,
    0x20,
    0x00,
    0x01,
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1a,
    0x1b,
    0x1c,
    0x1d,
    0x1e,
    0x01, // sighash type
    0x00, // separator
  ]);

  // Output section
  const outputSection = Buffer.from([
    0x01, // output count
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x32, // value (50 sats)
    0x16, // script length (22 bytes)
    // P2WPKH script: OP_0 + OP_PUSHBYTES_20 + pubkey hash
    0x00,
    0x14, // OP_0 + OP_PUSHBYTES_20
    0x01,
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x00, // separator
  ]);

  // Combine all sections
  const psbt = Buffer.concat([
    magicBytes,
    version,
    globalTx,
    inputSection,
    outputSection,
  ]);

  return psbt.toString("base64");
}

console.log("Generating proper 2-of-3 multisig PSBT files...\n");

const unsignedPSBT = generateUnsignedMultisigPSBT();
const signedPSBT = generateSignedMultisigPSBT();

console.log("Unsigned 2-of-3 Multisig PSBT (should pass validation):");
console.log(unsignedPSBT);
console.log("\nSigned 2-of-3 Multisig PSBT (should fail validation):");
console.log(signedPSBT);

// Write to files
const fs = require("fs");
fs.writeFileSync("test-unsigned-2of3.psbt", unsignedPSBT);
fs.writeFileSync("test-signed-2of3.psbt", signedPSBT);

console.log("\n‚úÖ PSBT files written to:");
console.log("- test-unsigned-2of3.psbt");
console.log("- test-signed-2of3.psbt");

// Verify the PSBTs have proper magic bytes
console.log("\nüîç Verifying PSBT structure:");
const unsignedBuffer = Buffer.from(unsignedPSBT, "base64");
const signedBuffer = Buffer.from(signedPSBT, "base64");

console.log(
  "Unsigned PSBT magic bytes:",
  unsignedBuffer.subarray(0, 5).toString("hex")
);
console.log(
  "Signed PSBT magic bytes:",
  signedBuffer.subarray(0, 5).toString("hex")
);
console.log("Expected magic bytes: 70736274ff");

// Test signature detection
console.log("\nüß™ Testing signature detection:");
const unsignedHex = unsignedBuffer.toString("hex");
const signedHex = signedBuffer.toString("hex");

// Check for PARTIAL_SIG patterns
const partialSigPattern = /02[0-9a-f]{2}21[0-9a-f]{66}/;
const unsignedHasSig = partialSigPattern.test(unsignedHex);
const signedHasSig = partialSigPattern.test(signedHex);

console.log(
  "Unsigned PSBT has PARTIAL_SIG:",
  unsignedHasSig ? "‚ùå FAIL" : "‚úÖ PASS"
);
console.log(
  "Signed PSBT has PARTIAL_SIG:",
  signedHasSig ? "‚úÖ PASS" : "‚ùå FAIL"
);
